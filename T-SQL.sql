--1
CREATE OR REPLACE PROCEDURE GetCustomerPurchaseHistory (
    p_ACustomerID IN NUMBER
) IS
BEGIN
    --DBMS_OUTPUT.PUT_LINE('debugging');
    FOR rec IN (
        SELECT s.SaleID, s.SaleDate, s.TotalAmount
        FROM Sale s
        WHERE s.ACustomerID = p_ACustomerID
        ) LOOP
            DBMS_OUTPUT.PUT_LINE('Sale ID: ' || rec.SaleID || ', Sale Date: ' || rec.SaleDate || ', Total Amount: ' || rec.TotalAmount);
        END LOOP;
END;
/

CALL GetCustomerPurchaseHistory(1);
/
--checker to see if above procedure works
SELECT s.SaleID, s.SaleDate, s.TotalAmount
FROM Sale s
WHERE s.ACustomerID = 1;


--TransferInventory - transfers antiques from one location to another.
DROP TABLE InventoryTransferLog;
CREATE TABLE InventoryTransferLog (
                                      LogID NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
                                      TransferDate DATE DEFAULT SYSDATE NOT NULL,
                                      SourceLocationID NUMBER NOT NULL,
                                      TargetLocationID NUMBER NOT NULL,
                                      ItemsTransferred NUMBER DEFAULT 0
);
CREATE OR REPLACE PROCEDURE TransferInventory (
    p_SourceLocationID IN NUMBER,
    p_TargetLocationID IN NUMBER
)
AS
    CURSOR c2 IS
        SELECT AntiqueID
        FROM Antique
        WHERE ALocationID = p_SourceLocationID;

    v_AntiqueID NUMBER;
    v_ItemsTransferred NUMBER := 0;
BEGIN
    OPEN c2;

    LOOP
        FETCH c2 INTO v_AntiqueID;
        EXIT WHEN c2%NOTFOUND;

        UPDATE Antique
        SET ALocationID = p_TargetLocationID
        WHERE AntiqueID = v_AntiqueID;

        v_ItemsTransferred := v_ItemsTransferred + 1;
    END LOOP;

    CLOSE c2;

    INSERT INTO InventoryTransferLog (TransferDate, SourceLocationID, TargetLocationID, ItemsTransferred)
    VALUES (SYSDATE, p_SourceLocationID, p_TargetLocationID, v_ItemsTransferred);

    DBMS_OUTPUT.PUT_LINE('Inventory transfer complete. Items transferred: ' || v_ItemsTransferred);
END;
/

--checkers for the above procedure
SELECT * FROM Antique WHERE ALocationID IN (1, 3);
CALL TransferInventory(3, 1);
SELECT * FROM Antique WHERE ALocationID IN (1, 3);
SELECT * FROM InventoryTransferLog;


--PreventNegativeQuantity - prevents an update or insert in Antique_Sale that would result in a negative Quantity.
CREATE OR REPLACE TRIGGER PreventNegativeQuantity
    BEFORE INSERT OR UPDATE
    ON Antique_Sale
    FOR EACH ROW
BEGIN
    IF :NEW.Quantity < 0 THEN
        DBMS_OUTPUT.PUT_LINE('invalid value!');
        RAISE_APPLICATION_ERROR(-20002, 'Quantity cannot be negative.');
    END IF;
END;
/

--checkers for above trigger
BEGIN
    INSERT INTO Antique_Sale (AntiqueSaleID, AntiqueID, SaleID, Quantity, Subtotal)
    VALUES (1, 101, 1, -5, 500);

    DBMS_OUTPUT.PUT_LINE('this should NOT print');
EXCEPTION
    WHEN OTHERS THEN
        DBMS_OUTPUT.PUT_LINE('this should print (test failed as it should according to PreventNegativeQuantity)');
END;
/

BEGIN
    UPDATE Antique_Sale
    SET Quantity = -10
    WHERE AntiqueSaleID = 1;

    DBMS_OUTPUT.PUT_LINE('this should NOT print');
EXCEPTION
    WHEN OTHERS THEN
        DBMS_OUTPUT.PUT_LINE('this should print (test failed as it should according to PreventNegativeQuantity) ');
END;
/



--TrackHighValueSales - logs sales where the TotalAmount exceeds a threshold.
DROP TABLE HighValueSalesLog;
CREATE TABLE HighValueSalesLog (
                                   LogID NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
                                   SaleID NUMBER NOT NULL,
                                   SaleDate DATE NOT NULL,
                                   TotalAmount NUMBER(10, 2) NOT NULL,
                                   LoggedDate DATE DEFAULT SYSDATE
);
CREATE OR REPLACE TRIGGER TrackHighValueSales
    AFTER INSERT OR UPDATE
    ON Sale
    FOR EACH ROW
BEGIN
    IF :NEW.TotalAmount > 5000 THEN
        INSERT INTO HighValueSalesLog (SaleID, SaleDate, TotalAmount)
        VALUES (:NEW.SaleID, :NEW.SaleDate, :NEW.TotalAmount);
        DBMS_OUTPUT.PUT_LINE('High-value sale logged: Sale ID ' || :NEW.SaleID);
    END IF;
END;
/

--checkers for above trigger
INSERT INTO Sale (SaleID, ACustomerID, AEmployeeID, SaleDate, TotalAmount)
VALUES (7, 1, 1, SYSDATE, 3000);

INSERT INTO Sale (SaleID, ACustomerID, AEmployeeID, SaleDate, TotalAmount)
VALUES (8, 1, 1, SYSDATE, 6000); --only this one should be logged - it exceeds the set threshold of 5000

SELECT * FROM HighValueSalesLog;